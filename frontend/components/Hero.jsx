// frontend/components/Hero.jsx
import { useState, useRef, useEffect } from 'react';
import Router from 'next/router';

const UI = {
  title: '#111827',
  text: 'rgba(17,24,39,0.80)',
  border: 'rgba(17,24,39,0.12)',
  glass: 'rgba(17,24,39,0.04)',    // –ª—ë–≥–∫–æ–µ ¬´—Å—Ç–µ–∫–ª–æ¬ª –ø–æ–¥ —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
  button: '#2a65f7',
  buttonHover: '#1e53d6',
  btnBg: 'var(--blue)',
  btnText: '#ffffff',
  btnHover: '#1e53d6',
};

const fmt = new Intl.NumberFormat('ru-RU');

export default function Hero({ listingCount = 0, inspectionsUnread = 0, tradeOrdersUnread = 0 }) {
  const [q, setQ] = useState('');
  const inputRef = useRef(null);

  // –§—Ä–∞–∑—ã –¥–ª—è "–º–∞–≥–∏—á–µ—Å–∫–æ–π" –ø–µ—á–∞—Ç–∏ –≤ placeholder
  const demoQueries = useRef([
    'Toyota Camry 2018, –ú–æ—Å–∫–≤–∞',
    'VIN: WDBUF56X48B123456',
    'BMW X5 F15 –¥–æ 2.5 –º–ª–Ω',
    '–ü—Ä–æ–±–µ–≥ < 100 000, 4WD',
    '–ê—É–∫—Ü–∏–æ–Ω: Hyundai Solaris 2020',
  ]);

  // –ê–Ω–∏–º–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ—Å—è" placeholder ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ —é–∑–µ—Ä –Ω–µ –Ω–∞—á–∞–ª –≤–≤–æ–¥
  useEffect(() => {
    const input = inputRef.current;
    if (!input) return;

    const idlePH = '–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∏–ª–∏ VIN‚Ä¶';
    const typeSpeed = 100;                 // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–º—Å/—Å–∏–º–≤–æ–ª)
    const deleteSpeed = 40;               // —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è (–º—Å/—Å–∏–º–≤–æ–ª)
    const holdAfterTypeMs = 10000;         // –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏
    const delayBetweenQueriesMs = 15000;  // 30 —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã

    let timers = [];
    let stopped = false;
    let idx = 0;
    const initialPH = input.placeholder || idlePH;

    const clearTimers = () => { timers.forEach(clearTimeout); timers = []; };
    const stopAll = () => { stopped = true; clearTimers(); input.placeholder = idlePH; };
    const isUserBusy = () => document.activeElement === input || (input.value && input.value.length > 0);

    const typeText = (text) => new Promise((resolve) => {
      let i = 0;
      const tick = () => {
        if (stopped || isUserBusy()) return resolve('stopped');
        input.placeholder = text.slice(0, i + 1);
        i++;
        if (i >= text.length) {
          timers.push(setTimeout(() => resolve('done'), holdAfterTypeMs));
        } else {
          timers.push(setTimeout(tick, typeSpeed));
        }
      };
      tick();
    });

    const deleteText = () => new Promise((resolve) => {
      const run = () => {
        if (stopped || isUserBusy()) return resolve('stopped');
        const cur = input.placeholder || '';
        if (cur.length === 0) return resolve('done');
        input.placeholder = cur.slice(0, -1);
        timers.push(setTimeout(run, deleteSpeed));
      };
      run();
    });

    const wait = (ms) => new Promise((r) => {
      const t = setTimeout(r, ms);
      timers.push(t);
    });

    const loop = async () => {
      // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      input.placeholder = idlePH;
      while (!stopped) {
        const list = demoQueries.current && demoQueries.current.length ? demoQueries.current : [idlePH];
        const phrase = list[idx % list.length];

        const typed = await typeText(phrase);
        if (typed === 'stopped') break;

        const deleted = await deleteText();
        if (deleted === 'stopped') break;

        idx++;
        // –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ¬´–∑–∞–Ω—è—Ç–æ—Å—Ç–∏¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        let waited = 0;
        const step = 200;
        while (waited < delayBetweenQueriesMs && !stopped && !isUserBusy()) {
          await wait(step);
          waited += step;
        }
      }
    };

    // –°–ª—É—à–∞—Ç–µ–ª–∏: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–≤–æ–¥/—Ñ–æ–∫—É—Å ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ¬´–º–∞–≥–∏—é¬ª
    const onFocus = () => stopAll();
    const onInput = () => stopAll();
    input.addEventListener('focus', onFocus, { passive: true });
    input.addEventListener('input', onInput, { passive: true });

    loop();

    return () => {
      input.removeEventListener('focus', onFocus);
      input.removeEventListener('input', onInput);
      clearTimers();
      stopped = true;
      input.placeholder = initialPH;
    };
  }, []);

  function onSubmit(e) {
    e.preventDefault();
    const query = q.trim();
    if (!query) return Router.push('/trades');
    Router.push(`/trades?q=${encodeURIComponent(query)}`);
  }

  return (
    <section style={styles.wrap}>
      <div style={styles.inner}>
        {/* –ë–µ–π–¥–∂ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π */}
        <div style={styles.badge}>
          <span style={styles.pulse} />
          <span style={styles.badgeNum}>{fmt.format(Math.max(0, listingCount))}</span>
          <span style={styles.badgeLabel}>–û–±—ä—è–≤–ª–µ–Ω–∏–π –∂–¥—É—Ç —Å–≤–æ–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</span>
        </div>

        {inspectionsUnread > 0 && (
          <a href="/inspections" style={styles.alert}>
            <span>–ù–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–º–æ—Ç—Ä–æ–≤</span>
            <span style={styles.alertCount}>{inspectionsUnread > 99 ? '99+' : inspectionsUnread}</span>
          </a>
        )}
        {tradeOrdersUnread > 0 && (
          <a href="/my-trades" style={{ ...styles.alert, background: 'rgba(16, 185, 129, 0.1)', borderColor: 'rgba(16,185,129,0.3)' }}>
            <span>–ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º —Ç–æ—Ä–≥–∞–º</span>
            <span style={styles.alertCount}>{tradeOrdersUnread > 99 ? '99+' : tradeOrdersUnread}</span>
          </a>
        )}

        <h1 style={styles.title}>
          –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –∞—É–∫—Ü–∏–æ–Ω–æ–≤ ‚Äî{' '}
          <span style={styles.titleGradient}>–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ —É–¥–æ–±–Ω–æ</span>
        </h1>

        <form onSubmit={onSubmit} style={styles.form} className="hero-form">
          <input
            ref={inputRef}
            value={q}
            onChange={(e) => setQ(e.target.value)}
            placeholder="–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∏–ª–∏ VIN‚Ä¶"
            aria-label="–ü–æ–∏—Å–∫"
            style={styles.input}
          />
          <button
            type="submit"
            style={styles.button}
            onMouseEnter={(e) => (e.currentTarget.style.background = UI.btnHover)}
            onMouseLeave={(e) => (e.currentTarget.style.background = UI.btnBg)}
          >
            –ù–∞–π—Ç–∏
          </button>
        </form>

        <div style={styles.features} className="features">
          <Feature icon="üîé" title="–ß–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" text="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ ‚Äî –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ." />
          <Feature icon="‚ö°" title="–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç" text="–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤." />
          <Feature icon="üõ°Ô∏è" title="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" text="–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏." />
        </div>
      </div>

      <style jsx>{`
        @media (max-width: 900px) {
          .features { grid-template-columns: 1fr; }
          .hero-form { flex-direction: column; align-items: stretch; }
          .hero-form button { width: 100%; }
        }
        @keyframes pulseKey {
          0% { box-shadow: 0 0 0 0 rgba(52,211,153,0.7); }
          70% { box-shadow: 0 0 0 12px rgba(52,211,153,0); }
          100% { box-shadow: 0 0 0 0 rgba(52,211,153,0); }
        }
      `}</style>
    </section>
  );
}

function Feature({ icon, title, text }) {
  return (
    <div style={styles.feature}>
      <div style={styles.featureIcon}>{icon}</div>
      <div>
        <div style={styles.featureTitle}>{title}</div>
        <div style={styles.featureText}>{text}</div>
      </div>
    </div>
  );
}

const styles = {
  wrap: {
    position: 'relative',
    width: '100%',
    overflow: 'hidden',
    padding: '56px 0 28px',
    margin: '0 calc(50% - 50vw)',
    background: 'transparent',
  },
  inner: {
    position:'relative',
    maxWidth: 1100,
    margin: '0 auto',
    padding: '0 16px',
  },
  badge: {
    display: 'inline-flex',
    alignItems:'center',
    gap: 10,
    padding: '8px 12px',
    borderRadius: 999,
    background: UI.glass,
    border: '1.5px solid var(--stats-border)',
    color: UI.text,
    fontSize: 13.5,
    backdropFilter: 'blur(6px)',
  },
  pulse: {
    width:8, height:8, borderRadius:999,
    background: '#34d399',
    animation: 'pulseKey 1.8s infinite',
  },
  badgeNum: {
    fontWeight: 800,
    fontSize: 15.5,
    color: 'var(--blue)',             // –°–ò–ù–ò–ô –∫–∞–∫ ¬´–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ —É–¥–æ–±–Ω–æ¬ª
    letterSpacing: 0.3,
    fontVariantNumeric: 'tabular-nums',
  },
  badgeLabel: { color: 'var(--text-900)' },  // –ß–Å–†–ù–´–ô –¥–ª—è "–û–±—ä—è–≤–ª–µ–Ω–∏–π"

  title: {
    margin: '14px 0 8px',
    fontSize: '38px',
    lineHeight: 1.15,
    color: '#111827',      // –ß–Å–†–ù–´–ô –¥–ª—è "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –∞—É–∫—Ü–∏–æ–Ω–æ–≤ ‚Äî"
    fontWeight: 700,
  },
  titleGradient: {
    color: '#2a65f7',      // –°–ò–ù–ò–ô –¥–ª—è "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ —É–¥–æ–±–Ω–æ"
  },

  form: { marginTop: 18, display: 'flex', gap: 10, alignItems: 'center' },
  input: {
    flex: 1,
    padding: '14px 14px',
    borderRadius: 14,
    background: '#FFFFFF',
    border: `1px solid ${UI.border}`,
    outline: 'none',
    color: '#111827',
    fontSize: 16,
  },

  button: {
    padding: '14px 16px',
    borderRadius: 14,
    background: UI.btnBg,            // –∫–∞–∫ –≤ —à–∞–ø–∫–µ
    color: UI.btnText,               // –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    fontWeight: 600,
    border: '1px solid ' + UI.btnBg, // —Ä–∞–º–∫–∞ –≤ —Ç–æ–Ω
    cursor: 'pointer',
  },

 features: {
    marginTop: 18,
    display: 'grid',
    gridTemplateColumns: 'repeat(3, minmax(0,1fr))',
    gap: 10,
  },
  feature: { 
    display: 'flex', 
    gap: 10, 
    alignItems: 'flex-start', 
    padding: 14, 
    borderRadius: 14, 
    background:
      'linear-gradient(135deg, rgba(42,101,247,0.12) 0%, rgba(42,101,247,0.04) 60%, rgba(103,232,249,0.08) 100%)',
    border: '1px solid var(--border)',
    boxShadow: 'var(--shadow-sm)',
  },
  featureIcon: {
    width: 48, height: 48, borderRadius: 12,
    display: 'grid', placeItems: 'center',
    background: 'rgba(255,255,255,0.85)',
    fontSize: 22, 
  },
  },
  featureTitle: { color: 'var(--text-900)', fontWeight: 700, fontSize: 14, lineHeight: 1.2 },
  featureText: { color: 'var(--text-600)', fontSize: 13, lineHeight: 1.4 },
  alert: {
    display: 'inline-flex',
    alignItems: 'center',
    gap: 10,
    padding: '10px 14px',
    borderRadius: 12,
    border: '1px solid rgba(37,99,235,0.35)',
    background: 'rgba(37,99,235,0.12)',
    color: '#1d4ed8',
    fontWeight: 700,
    textDecoration: 'none',
    marginTop: 12,
    alignSelf: 'flex-start',
  },
  alertCount: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    minWidth: 32,
    padding: '2px 10px',
    borderRadius: 999,
    background: '#1d4ed8',
    color: '#fff',
    fontSize: 14,
  },
};




